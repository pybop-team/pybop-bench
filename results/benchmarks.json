{
    "benchmark_model.BenchmarkModel.time_model_predict": {
        "code": "class BenchmarkModel:\n    def time_model_predict(self, model, parameter_set):\n        \"\"\"\n        Benchmark the predict method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.model.predict(\n            inputs=self.inputs, t_eval=self.t_eval, initial_state=self.init_state\n        )\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_predict",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8c071d39605942627ef11760ba0f656f001a5805c2e5314f80a6b249e7feb922",
        "warmup_time": -1
    },
    "benchmark_model.BenchmarkModel.time_model_simulate": {
        "code": "class BenchmarkModel:\n    def time_model_simulate(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulate method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem.model.simulate(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_simulate",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "96e89b3a0de27451256ca53259134766dddfea8485af5f64b01d11184c123805",
        "warmup_time": -1
    },
    "benchmark_model.BenchmarkModel.time_model_simulateS1": {
        "code": "class BenchmarkModel:\n    def time_model_simulateS1(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulateS1 method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem.model.simulateS1(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_simulateS1",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e6736ea769b985f62ac5f132ac58958ddbc60c2dda0517aa47a4390eb56b8a13",
        "warmup_time": -1
    },
    "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate": {
        "code": "class BenchmarkOptimisationConstruction:\n    def time_cost_evaluate(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the cost function evaluation.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimiser class being used.\n        \"\"\"\n        self.cost([0.63, 0.51])\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)",
        "min_run_count": 2,
        "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "36dd7863148059bcfa0a52a03fc7d091242344a4833782181239033a79d482fd",
        "warmup_time": -1
    },
    "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction": {
        "code": "class BenchmarkOptimisationConstruction:\n    def time_optimisation_construction(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the construction of the optimization class.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimiser class being used.\n        \"\"\"\n        self.optim = pybop.Optimisation(self.cost, optimiser=optimiser)\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)",
        "min_run_count": 2,
        "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "604fd991f1b6248286dbf356c2ea0b8a8f586b1e3158f7c28b3acf27ea85de9e",
        "warmup_time": -1
    },
    "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask": {
        "code": "class BenchmarkParameterisation:\n    def time_optimiser_ask(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the optimizer's ask method.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        if optimiser not in [pybop.SciPyMinimize, pybop.SciPyDifferentialEvolution]:\n            self.optim.pints_optimiser.ask()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )",
        "min_run_count": 2,
        "name": "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e072526e934d1829ae2c73917a85f2dfac5b8e6b921a952c05490ccc8526ac91",
        "warmup_time": -1
    },
    "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation": {
        "code": "class BenchmarkParameterisation:\n    def time_parameterisation(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the parameterization process. Optimiser options are left at high values\n        to ensure the threshold is met and the optimisation process is completed.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimiser class being used (unused).\n        \"\"\"\n        self.optim.run()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )",
        "min_run_count": 2,
        "name": "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "21afc4b73028303679eb444dd141fa868b50f068da343df1d924ea5df9f4e744",
        "warmup_time": -1
    },
    "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1": {
        "code": "class BenchmarkTrackParameterisation:\n    def track_x1(self, model, parameter_set, optimiser):\n        return self.x[0]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)",
        "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1",
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "type": "track",
        "unit": "unit",
        "version": "410a7efa8c9e84890782035e3c281b3e3e15ce460ed4bd8657b2c9c621449806"
    },
    "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2": {
        "code": "class BenchmarkTrackParameterisation:\n    def track_x2(self, model, parameter_set, optimiser):\n        return self.x[1]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)",
        "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2",
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "type": "track",
        "unit": "unit",
        "version": "44b8e89b0bba0d5815b85bfd88d86570b6c84a077b8f8e07e250f2fc1c89a1ac"
    },
    "version": 2
}