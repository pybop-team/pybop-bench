{
    "benchmark_model.BenchmarkModel.time_model_predict": {
        "code": "class BenchmarkModel:\n    def time_model_predict(self, model, parameter_set):\n        \"\"\"\n        Benchmark the predict method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.model.predict(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        values = self.model.predict(t_eval=self.t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters, init_soc=0.5\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_predict",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f9b9b70cdd0afa681b3ac8d845ce9bcbce18c13bb8afe0891794d253585f341d",
        "warmup_time": -1
    },
    "benchmark_model.BenchmarkModel.time_model_simulate": {
        "code": "class BenchmarkModel:\n    def time_model_simulate(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulate method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem._model.simulate(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        values = self.model.predict(t_eval=self.t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters, init_soc=0.5\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_simulate",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b60f0cf276c02117180033cfbf9cfce9ddd4dea3bd41119dc745559fa6e94297",
        "warmup_time": -1
    },
    "benchmark_model.BenchmarkModel.time_model_simulateS1": {
        "code": "class BenchmarkModel:\n    def time_model_simulateS1(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulateS1 method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem._model.simulateS1(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        values = self.model.predict(t_eval=self.t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters, init_soc=0.5\n        )",
        "min_run_count": 2,
        "name": "benchmark_model.BenchmarkModel.time_model_simulateS1",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d47d6b234508f8376a52a378c376f713f57b566bcb2178ced869eceae143bae0",
        "warmup_time": -1
    },
    "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate": {
        "code": "class BenchmarkOptimisationConstruction:\n    def time_cost_evaluate(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the cost function evaluation.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        self.cost([0.63, 0.51])\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)",
        "min_run_count": 2,
        "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "25e6c24a08818518ebae26fc7fcbb9887fe0c36219926cfd5e6856159ca96ebc",
        "warmup_time": -1
    },
    "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction": {
        "code": "class BenchmarkOptimisationConstruction:\n    def time_optimisation_construction(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the construction of the optimization class.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        self.optim = pybop.Optimisation(self.cost, optimiser=optimiser)\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)",
        "min_run_count": 2,
        "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6290e28f4b9bb5b87050382aab3bbe168d6dc487b3066f5cc7275eca10274c01",
        "warmup_time": -1
    },
    "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask": {
        "code": "class BenchmarkParameterisation:\n    def time_optimiser_ask(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the optimizer's ask method.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        if optimiser not in [pybop.SciPyMinimize, pybop.SciPyDifferentialEvolution]:\n            self.optim.pints_optimiser.ask()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )",
        "min_run_count": 2,
        "name": "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d5bb6ba37c30c6b8e06ccdb3d86c2ba60bcbe821b1be67037550e0708ba67915",
        "warmup_time": -1
    },
    "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation": {
        "code": "class BenchmarkParameterisation:\n    def time_parameterisation(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the parameterization process. Optimiser options are left at high values\n        to ensure the threshold is met and the optimisation process is completed.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used (unused).\n        \"\"\"\n        self.optim.run()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )",
        "min_run_count": 2,
        "name": "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation",
        "number": 0,
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6c0b394d6dd0cf500f92b9229b60fb4e0d35213e118fcc70f28ff54a3ab2c1b6",
        "warmup_time": -1
    },
    "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1": {
        "code": "class BenchmarkTrackParameterisation:\n    def track_x1(self, model, parameter_set, optimiser):\n        return self.x[0]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)",
        "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1",
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "type": "track",
        "unit": "unit",
        "version": "270d2dbf8d59bfcf1e0a60805dde0aee0e87f940c2fce59fe87dce6d313ffc7a"
    },
    "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2": {
        "code": "class BenchmarkTrackParameterisation:\n    def track_x2(self, model, parameter_set, optimiser):\n        return self.x[1]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)",
        "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2",
        "param_names": [
            "model",
            "parameter_set",
            "optimiser"
        ],
        "params": [
            [
                "<class 'pybop.models.lithium_ion.echem.SPM'>",
                "<class 'pybop.models.lithium_ion.echem.SPMe'>"
            ],
            [
                "'Chen2020'"
            ],
            [
                "<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>",
                "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>",
                "<class 'pybop.optimisers.pints_optimisers.AdamW'>",
                "<class 'pybop.optimisers.pints_optimisers.CMAES'>",
                "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>",
                "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>",
                "<class 'pybop.optimisers.pints_optimisers.PSO'>",
                "<class 'pybop.optimisers.pints_optimisers.SNES'>",
                "<class 'pybop.optimisers.pints_optimisers.XNES'>"
            ]
        ],
        "type": "track",
        "unit": "unit",
        "version": "eb2464e9614964140274cc753d066b9eff955852315eeaedce24ed34cb4ed03a"
    },
    "version": 2
}