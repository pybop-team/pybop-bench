{"project": "PyBOP", "project_url": "https://github.com/pybop-team/pybop", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"325": "6e5c00781643987c467654379d2352df94317055", "534": "760ceb84eeb88376740a735b000331d7e2956674", "542": "9e9c067c981febfc1ad7bc6771566bbfc65d4339", "975": "ebc7b628b10c4835f8e842158b44f4622f30d6d2", "978": "aa9a3951b1e24a9f2a1100a1b63e990db8e093dc", "983": "68b4c9bab38978ae80b51dc42064b674efb0b9e2", "994": "7a7e9efbbd98b33773c45c4b6e85e88ffd00bc4a", "998": "896f1b338c888a58f8b769560f51155c2b9c903c", "1038": "75967f7658bdea60b1551da42e03b6ebb8b0d124", "1079": "92abe7ed7504fbcc7a5258071b99114aab9a919c", "1084": "34b7790dc6f7ee2ae36ee3914b50079b98a9889a", "1098": "ecf8be429e718e5bffb8b47addb39ca56b62462f", "1112": "68203df804898d81fe5f0b9b8198a6d1a0126865", "1121": "68c0e49c09c1db7447dbb9986a6579ef1f0b317f", "1158": "8cb625ae73a90067bec8903a2e2720597dd54b96", "1169": "05095987d7aba8a8d267ff55450e82b3e533be7f", "1173": "040a8b1e04f63ead01a5991de9883c38ee14c9a7", "1187": "36b1b11bffab961a70940f7ea97ce703d4973b42", "1206": "8161d732adeb2897655f628c4c875f99868663cb", "1216": "91f03735fae3b5b3433fb6ff2e6b4aa11db325c3", "1222": "6ba3d047a87ff86cd395c1a868a89e898da76b03", "1239": "57e0e8368fbe1da69c0606ae9c472aa80dff7714", "1254": "692b4d5e71a69660b8b989c7bab2559cb54a2901", "1299": "1431f67c9c3474cfe9633f81027f9d980f9a31da", "1304": "b1070ea25bdf8ebac7d33232f6228ffe36ffb5ec", "1336": "54edc3cf2e956a7b7dfd23e5bdbe74e124d44f08", "1346": "490273baeab7428a46d7ff477e49074b69bee3e5", "1362": "0395429a87cfa6cb2662379004c8b540cb4247a7", "1417": "716cc813f5bb3e3901ecdae51d8454b57d4d3aa8", "1420": "074deb64dd0101f3ac8aa27f6b1abe07fe225554", "1445": "0d7596c591fd40f23793aa146e41a1a7b3b8e58f", "1449": "e149cfbcac0fdf0de374763cd97e2538db16d21a", "1560": "4de2c2e8b996ead88f8a48c54a65e5315fa213ee", "1588": "f32c38338843127dd4c291ca57467a478645cb08", "1640": "eed0fd069f6b27c09d9d5e13558286079eddabd4", "1666": "4e8b0bcc8560b2a1b43c964490bc15a6e9b3a5a3", "1724": "2a588e0f68ad727348ac905b6ba576f2157fc24c", "1737": "1ff8115ab11aa00466ca0a616f2108bea04b7230", "1764": "af5df5f4257bf6c2b591651c0932d5b37ec15e26", "1783": "9ac4d01b090ac9df6c07c230cc30336eaa1396c7", "1841": "b49ede48210b8f5f32976ea04eceee88c7deded2", "1901": "d40cc4ff3dfff61da896d68019aca5a41a52b0f6", "1903": "6487bf187a682f24fc237f4d114913c1112f707c", "1940": "4638a60f1bc00afef0bd2c8e179b7c17826289d4", "1953": "2caf7badc3a492b95a870fa9836e5448840f14c5", "1988": "e34099fa90223763dc738a8aba47e929354c811f", "2034": "ddfd905450be886963aed732e6f1e4484a6e075d", "2040": "e6788e450cd49c2fbd59c9e0d290d8aedf30c863", "2110": "737a4f8e4e1e68c8fd99f3b3f755d395c8feeaee", "2121": "08fa1cb58d46cae9424c7ce809ccf52d8ef766ff", "2200": "9e15f90b75c4f5fb04cb17c0807dd0b5e1a2e6fb", "2360": "a5ce284a5d206b71beae5dd871608b468923025a", "2401": "d414460f71a677899516f6f19442b966b6d7a16c", "2428": "1a764707687de91db7ff39e607ab46f3502eaa81", "2485": "cd07b146e93553236132839811618ebd1568499f", "2501": "855b606417e059946796e13da318e481ebc5cf64", "2510": "ab6eca5ef141d02a6b1df096b5dcd425f7cb1f26", "2554": "eb5a632976a874fbe9dd7e8c89d964f1da97ad5c", "2579": "99632b94cdec3cfc9caa8b1f61b751e60e3bb43e", "2586": "7d07f4aa3d25e11d84bffc96a4d7459f26c59048", "2600": "2062c2ff18abbd0e50e7a72c3a4215d725f2bc30", "2626": "f0377a123c0d0d281db93c1bb0533e50102fd181", "2630": "976872a6a815fdfa1425bd9529b4df1566959f80", "2640": "350df28568ad5b49d2143ce545a8631601611664", "2660": "4633951da1a43949b31a2d3748bc2974d56deda6", "2664": "341185801c666f27ae07460aefad7cddf9566831", "2671": "04efc27f70e20214fccd555fd874fb16a53dbf30", "2682": "a420ea7970c0ee34387ce433e02c2da62a05934f", "2716": "7d57304bf4ec264f32464b35ce3b20651d7f19ec", "2734": "01fda0c3ef3f4450efaccfab29d3dd51330a566d", "2743": "87da4d75e7ff39e091dacc3a29f26e8d21fa5916", "2758": "e64857ea7ec2066bfe1f3455bcfbf938b9ff56c6", "2802": "3fc7dbf3b60ad494ec8670e9c75e6a2d9832c20c", "2825": "851c82f8d81194a3fc90cbee4e7b12cc8f499376", "2840": "5047288d955f660efc3df3d3989f084df42adc43", "2850": "bd8ba2fadea4588e00034cb5a228732763d8b775", "2860": "93da35adeb71b63de992137da74a53b58757f9a4", "2887": "b2873c96f8bc5c70acb0363c4ee73add1dbfb989", "2896": "943383acc79697a2d34eb57daab0e57b0b4fff13", "2921": "5deb93fb38a78a2c8febb07aab5d326854b154db", "2949": "84782f83abd60c313fc5e975b1f5ce537302e8d2", "2982": "38346e0a8f43dffa3da41889f02b8e5acd873cf0", "3039": "145b96b3c5e7ca4be1539f31778301c45d34c3ff", "3072": "10950163052160901910d26c73bb1177d44a2120", "3092": "b71262880f5a5af0243d3b1b7c55bf6be1c09c61", "3151": "ebc15e2ed6ff22043321cf03a5896d5ae9fc03f0", "3213": "00f7b5c177b46b9172767c960d59f25794c91414", "3222": "c1852469255fe201626e69b4ae70e6015fc1990c", "3224": "0166b399fedff74b59523a1b83601e81f3b9bb47", "3231": "03fdbf7ceacb7328bad1e8f4f97b5f14250a39ed", "3256": "a99bd4f037aab904aedac2102baf1fd60e036e88", "3279": "1607bf39ce0e447ad6b1e573f11487b6348f5ed7", "3303": "3111a49fed263711608e3cdf77ddeaa10cc8ddaf", "3341": "844e7804885faebf43453e0b46947c6d142eab06", "3397": "1b93bc54762db920d83bb158cfb7b6c57d6a986a", "3445": "1a7ce81f7f052ce9bd49c34a89b4c4001ba09eee", "3496": "24c54d9fe881d6121c5e1d69269747b3cfb75d6e", "3498": "e36ff810c248c7cf06715902bc1622faa38005cf"}, "revision_to_date": {"325": 1700495475000, "534": 1702977995000, "542": 1703062685000, "975": 1710526427000, "978": 1710583883000, "983": 1710757347000, "994": 1710838081000, "998": 1710859303000, "1038": 1711033720000, "1079": 1711396712000, "1084": 1711447503000, "1098": 1711621425000, "1112": 1712314081000, "1121": 1712397450000, "1158": 1712651471000, "1169": 1712856175000, "1173": 1712923822000, "1187": 1713087419000, "1206": 1713285876000, "1216": 1713438189000, "1222": 1713453494000, "1239": 1713690029000, "1254": 1713820250000, "1299": 1714098812000, "1304": 1714138946000, "1336": 1714763168000, "1346": 1715116117000, "1362": 1715255620000, "1417": 1715683748000, "1420": 1715706951000, "1445": 1715890910000, "1449": 1715952609000, "1560": 1717165101000, "1588": 1717663770000, "1640": 1718008039000, "1666": 1718093554000, "1724": 1718710044000, "1737": 1718717412000, "1764": 1719255505000, "1783": 1719595259000, "1841": 1720083999000, "1901": 1720440526000, "1903": 1720440976000, "1940": 1720685301000, "1953": 1720706337000, "1988": 1721116534000, "2034": 1721647280000, "2040": 1721720754000, "2110": 1722428761000, "2121": 1722434870000, "2200": 1722856265000, "2360": 1723792657000, "2401": 1724312259000, "2428": 1724336364000, "2485": 1724832862000, "2501": 1725265914000, "2510": 1725346879000, "2554": 1725880395000, "2579": 1726062429000, "2586": 1726143954000, "2600": 1726325004000, "2626": 1726645152000, "2630": 1726662045000, "2640": 1727172322000, "2660": 1727522400000, "2664": 1727771120000, "2671": 1727972963000, "2682": 1728373749000, "2716": 1728652347000, "2734": 1729156567000, "2743": 1729499625000, "2758": 1729616364000, "2802": 1730371457000, "2825": 1730478395000, "2840": 1730830339000, "2850": 1731403825000, "2860": 1731673038000, "2887": 1732133948000, "2896": 1732275408000, "2921": 1732635894000, "2949": 1733130050000, "2982": 1733327081000, "3039": 1733511000000, "3072": 1733946069000, "3092": 1734090605000, "3151": 1734530286000, "3213": 1734806995000, "3222": 1734954114000, "3224": 1735901517000, "3231": 1736416083000, "3256": 1736604607000, "3279": 1736956964000, "3303": 1737629023000, "3341": 1737968224000, "3397": 1738153905000, "3445": 1738537323000, "3496": 1738692918000, "3498": 1738695740000}, "params": {"machine": ["SelfHostedRunner"], "python": ["3.12"], "pybamm": [""], "numpy": [""], "scipy": [""], "pints": [""], "branch": ["develop"]}, "graph_param_list": [{"machine": "SelfHostedRunner", "python": "3.12", "pybamm": "", "numpy": "", "scipy": "", "pints": "", "branch": "develop"}], "benchmarks": {"benchmark_model.BenchmarkModel.time_model_predict": {"code": "class BenchmarkModel:\n    def time_model_predict(self, model, parameter_set):\n        \"\"\"\n        Benchmark the predict method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.model.predict(\n            inputs=self.inputs, t_eval=self.t_eval, initial_state=self.init_state\n        )\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )", "min_run_count": 2, "name": "benchmark_model.BenchmarkModel.time_model_predict", "number": 0, "param_names": ["model", "parameter_set"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "fdd1e27601bfe4ea1385c316633d682daa065c9f9f5a6bdb5f7630e31e140c9d", "warmup_time": -1}, "benchmark_model.BenchmarkModel.time_model_simulate": {"code": "class BenchmarkModel:\n    def time_model_simulate(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulate method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem.model.simulate(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )", "min_run_count": 2, "name": "benchmark_model.BenchmarkModel.time_model_simulate", "number": 0, "param_names": ["model", "parameter_set"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "1c6373549a344884d1726695fc51e859c63d85070a2938e6ac666112862908ec", "warmup_time": -1}, "benchmark_model.BenchmarkModel.time_model_simulateS1": {"code": "class BenchmarkModel:\n    def time_model_simulateS1(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulateS1 method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem.model.simulateS1(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        self.init_state = {\"Initial SoC\": 0.5}\n        values = self.model.predict(t_eval=self.t_eval, initial_state=self.init_state)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters\n        )", "min_run_count": 2, "name": "benchmark_model.BenchmarkModel.time_model_simulateS1", "number": 0, "param_names": ["model", "parameter_set"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7f9ebf418b3502eb09cdd59026cea138c8456a0236ce6a56342cada1a91982c1", "warmup_time": -1}, "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate": {"code": "class BenchmarkOptimisationConstruction:\n    def time_cost_evaluate(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the cost function evaluation.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimiser class being used.\n        \"\"\"\n        self.cost([0.63, 0.51])\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)", "min_run_count": 2, "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.pints_optimisers.CMAES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7d3bfb4f4da7413f4d2bcf55b90fe59121d7a5eacd9fb475ca848e4618500062", "warmup_time": -1}, "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction": {"code": "class BenchmarkOptimisationConstruction:\n    def time_optimisation_construction(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the construction of the optimization class.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimiser class being used.\n        \"\"\"\n        self.optim = pybop.Optimisation(self.cost, optimiser=optimiser)\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet(parameter_set))\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)", "min_run_count": 2, "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.pints_optimisers.CMAES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "171908701299501002730ab2ea2cba520e7b088471a77e143f3c25e701ba13f8", "warmup_time": -1}, "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask": {"code": "class BenchmarkParameterisation:\n    def time_optimiser_ask(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the optimizer's ask method.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        if optimiser not in [pybop.SciPyMinimize, pybop.SciPyDifferentialEvolution]:\n            self.optim.optimiser.ask()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )", "min_run_count": 2, "name": "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.AdamW'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8b9f7b202da79b1fc76cd503808f12298b9ee05d371b95fe2b23d615e4bc6348", "warmup_time": -1}, "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation": {"code": "class BenchmarkParameterisation:\n    def time_parameterisation(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the parameterization process. Optimiser options are left at high values\n        to ensure the threshold is met and the optimisation process is completed.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimiser class being used (unused).\n        \"\"\"\n        self.optim.run()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )", "min_run_count": 2, "name": "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.AdamW'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9960e64b6b29e5fa0449331a1698d758fc0ad53ff33392e831b3f3fac68b1057", "warmup_time": -1}, "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1": {"code": "class BenchmarkTrackParameterisation:\n    def track_x1(self, model, parameter_set, optimiser):\n        return self.x[0]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)", "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1", "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.AdamW'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "type": "track", "unit": "unit", "version": "fe14233db43c4e183df52e52e0fffdfb36f3dd43559b87aa3cbd23ee45fbd02d"}, "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2": {"code": "class BenchmarkTrackParameterisation:\n    def track_x2(self, model, parameter_set, optimiser):\n        return self.x[1]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimiser class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = pybop.Parameters(\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        )\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance and set options for consistent benchmarking\n        if optimiser in [pybop.GradientDescent]:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n                learning_rate=0.008,  # Compromise between stability & performance\n            )\n        else:\n            self.optim = pybop.Optimisation(\n                cost,\n                optimiser=optimiser,\n                max_iterations=250,\n                max_unchanged_iterations=25,\n                threshold=1e-5,\n                min_iterations=2,\n            )\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)", "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2", "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.AdamW'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "type": "track", "unit": "unit", "version": "7b55ee8bfefeb7e6ca6b319315bfb670dd1975ac52fad5ad9de66f701381a7a9"}}, "machines": {"SelfHostedRunner": {"machine": "SelfHostedRunner", "version": 1}}, "tags": {"v23.11": 325, "v23.12": 542, "v23.12rc0": 534, "v24.12": 3213, "v24.3": 1079, "v24.3.1": 1724, "v24.6": 1903, "v24.6.1": 2110, "v24.9.0": 2579, "v24.9.1": 2626, "v25.1": 3496}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}