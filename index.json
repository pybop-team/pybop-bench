{"project": "PyBOP", "project_url": "https://github.com/pybop-team/pybop", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"325": "6e5c00781643987c467654379d2352df94317055", "534": "760ceb84eeb88376740a735b000331d7e2956674", "542": "9e9c067c981febfc1ad7bc6771566bbfc65d4339", "976": "ebc7b628b10c4835f8e842158b44f4622f30d6d2", "979": "aa9a3951b1e24a9f2a1100a1b63e990db8e093dc", "984": "68b4c9bab38978ae80b51dc42064b674efb0b9e2", "995": "7a7e9efbbd98b33773c45c4b6e85e88ffd00bc4a", "999": "896f1b338c888a58f8b769560f51155c2b9c903c", "1039": "75967f7658bdea60b1551da42e03b6ebb8b0d124", "1080": "92abe7ed7504fbcc7a5258071b99114aab9a919c", "1085": "34b7790dc6f7ee2ae36ee3914b50079b98a9889a", "1099": "ecf8be429e718e5bffb8b47addb39ca56b62462f", "1113": "68203df804898d81fe5f0b9b8198a6d1a0126865", "1122": "68c0e49c09c1db7447dbb9986a6579ef1f0b317f", "1159": "8cb625ae73a90067bec8903a2e2720597dd54b96", "1171": "05095987d7aba8a8d267ff55450e82b3e533be7f", "1175": "040a8b1e04f63ead01a5991de9883c38ee14c9a7", "1189": "36b1b11bffab961a70940f7ea97ce703d4973b42", "1208": "8161d732adeb2897655f628c4c875f99868663cb", "1218": "91f03735fae3b5b3433fb6ff2e6b4aa11db325c3", "1224": "6ba3d047a87ff86cd395c1a868a89e898da76b03", "1241": "57e0e8368fbe1da69c0606ae9c472aa80dff7714", "1256": "692b4d5e71a69660b8b989c7bab2559cb54a2901", "1301": "1431f67c9c3474cfe9633f81027f9d980f9a31da", "1306": "b1070ea25bdf8ebac7d33232f6228ffe36ffb5ec", "1338": "54edc3cf2e956a7b7dfd23e5bdbe74e124d44f08", "1348": "490273baeab7428a46d7ff477e49074b69bee3e5", "1364": "0395429a87cfa6cb2662379004c8b540cb4247a7", "1419": "716cc813f5bb3e3901ecdae51d8454b57d4d3aa8", "1423": "074deb64dd0101f3ac8aa27f6b1abe07fe225554"}, "revision_to_date": {"325": 1700495475000, "534": 1702977995000, "542": 1703062685000, "976": 1710526427000, "979": 1710583883000, "984": 1710757347000, "995": 1710838081000, "999": 1710859303000, "1039": 1711033720000, "1080": 1711396712000, "1085": 1711447503000, "1099": 1711621425000, "1113": 1712314081000, "1122": 1712397450000, "1159": 1712651471000, "1171": 1712856175000, "1175": 1712923822000, "1189": 1713087419000, "1208": 1713285876000, "1218": 1713438189000, "1224": 1713453494000, "1241": 1713690029000, "1256": 1713820250000, "1301": 1714098812000, "1306": 1714138946000, "1338": 1714763168000, "1348": 1715116117000, "1364": 1715255620000, "1419": 1715683748000, "1423": 1715706951000}, "params": {"machine": ["SelfHostedRunner"], "python": ["3.12"], "pybamm": [""], "numpy": [""], "scipy": [""], "pints": [""], "branch": ["develop"]}, "graph_param_list": [{"machine": "SelfHostedRunner", "python": "3.12", "pybamm": "", "numpy": "", "scipy": "", "pints": "", "branch": "develop"}], "benchmarks": {"benchmark_model.BenchmarkModel.time_model_predict": {"code": "class BenchmarkModel:\n    def time_model_predict(self, model, parameter_set):\n        \"\"\"\n        Benchmark the predict method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.model.predict(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        values = self.model.predict(t_eval=self.t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters, init_soc=0.5\n        )", "min_run_count": 2, "name": "benchmark_model.BenchmarkModel.time_model_predict", "number": 0, "param_names": ["model", "parameter_set"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f9b9b70cdd0afa681b3ac8d845ce9bcbce18c13bb8afe0891794d253585f341d", "warmup_time": -1}, "benchmark_model.BenchmarkModel.time_model_simulate": {"code": "class BenchmarkModel:\n    def time_model_simulate(self, model, parameter_set):\n        \"\"\"\n        Benchmark the simulate method of the model.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n        \"\"\"\n        self.problem._model.simulate(inputs=self.inputs, t_eval=self.t_eval)\n\n    def setup(self, model, parameter_set):\n        \"\"\"\n        Setup the model and problem for predict and simulate benchmarks.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        self.model = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Current function [A]\",\n                prior=pybop.Gaussian(0.4, 0.02),\n                bounds=[0.2, 0.7],\n                initial_value=0.4,\n            )\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        self.t_eval = np.arange(0, 900, 2)\n        values = self.model.predict(t_eval=self.t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(self.t_eval)\n        )\n    \n        self.inputs = {\n            \"Current function [A]\": 0.4,\n        }\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": self.t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        self.problem = pybop.FittingProblem(\n            model=self.model, dataset=dataset, parameters=parameters, init_soc=0.5\n        )", "min_run_count": 2, "name": "benchmark_model.BenchmarkModel.time_model_simulate", "number": 0, "param_names": ["model", "parameter_set"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b60f0cf276c02117180033cfbf9cfce9ddd4dea3bd41119dc745559fa6e94297", "warmup_time": -1}, "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate": {"code": "class BenchmarkOptimisationConstruction:\n    def time_cost_evaluate(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the cost function evaluation.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        self.cost([0.63, 0.51])\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)", "min_run_count": 2, "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_cost_evaluate", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.pints_optimisers.CMAES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "25e6c24a08818518ebae26fc7fcbb9887fe0c36219926cfd5e6856159ca96ebc", "warmup_time": -1}, "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction": {"code": "class BenchmarkOptimisationConstruction:\n    def time_optimisation_construction(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the construction of the optimization class.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked.\n            parameter_set (str): The name of the parameter set being used.\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        self.optim = pybop.Optimisation(self.cost, optimiser=optimiser)\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the model, problem, and cost for optimization benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        model_instance = model(parameter_set=pybop.ParameterSet.pybamm(parameter_set))\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.6, 0.02),\n                bounds=[0.375, 0.7],\n                initial_value=0.63,\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.5, 0.02),\n                bounds=[0.375, 0.625],\n                initial_value=0.51,\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.001\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(\n            model=model_instance, dataset=dataset, parameters=parameters\n        )\n    \n        # Create cost function\n        self.cost = pybop.SumSquaredError(problem=problem)", "min_run_count": 2, "name": "benchmark_optim_construction.BenchmarkOptimisationConstruction.time_optimisation_construction", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.pints_optimisers.CMAES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6290e28f4b9bb5b87050382aab3bbe168d6dc487b3066f5cc7275eca10274c01", "warmup_time": -1}, "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask": {"code": "class BenchmarkParameterisation:\n    def time_optimiser_ask(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the optimizer's ask method.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used.\n        \"\"\"\n        if optimiser not in [pybop.SciPyMinimize, pybop.SciPyDifferentialEvolution]:\n            self.optim.optimiser.ask()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance\n        self.optim = pybop.Optimisation(cost, optimiser=optimiser)\n        if optimiser in [pybop.GradientDescent]:\n            self.optim.optimiser.set_learning_rate(\n                0.008\n            )  # Compromise between stability & performance", "min_run_count": 2, "name": "benchmark_parameterisation.BenchmarkParameterisation.time_optimiser_ask", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.Adam'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "216477d29c4b378b04ccffebe5f94904700aac2d43e429ca9f15408eb362a262", "warmup_time": -1}, "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation": {"code": "class BenchmarkParameterisation:\n    def time_parameterisation(self, model, parameter_set, optimiser):\n        \"\"\"\n        Benchmark the parameterization process. Optimiser options are left at high values\n        to ensure the threshold is met and the optimisation process is completed.\n    \n        Args:\n            model (pybop.Model): The model class being benchmarked (unused).\n            parameter_set (str): The name of the parameter set being used (unused).\n            optimiser (pybop.Optimiser): The optimizer class being used (unused).\n        \"\"\"\n        # Set optimizer options for consistent benchmarking\n        self.optim.set_max_unchanged_iterations(iterations=25, threshold=1e-5)\n        self.optim.set_max_iterations(250)\n        self.optim.set_min_iterations(2)\n        self.optim.run()\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance\n        self.optim = pybop.Optimisation(cost, optimiser=optimiser)\n        if optimiser in [pybop.GradientDescent]:\n            self.optim.optimiser.set_learning_rate(\n                0.008\n            )  # Compromise between stability & performance", "min_run_count": 2, "name": "benchmark_parameterisation.BenchmarkParameterisation.time_parameterisation", "number": 0, "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.Adam'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "acee1afb1d485f02ceebedff1aa4a751d73cd86d61ea5c1a87fed619c8ffab23", "warmup_time": -1}, "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1": {"code": "class BenchmarkTrackParameterisation:\n    def track_x1(self, model, parameter_set, optimiser):\n        return self.x[0]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance\n        self.optim = pybop.Optimisation(cost, optimiser=optimiser)\n        if optimiser in [pybop.GradientDescent]:\n            self.optim.optimiser.set_learning_rate(\n                0.008\n            )  # Compromise between stability & performance\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)", "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x1", "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.Adam'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "type": "track", "unit": "unit", "version": "08a85b547d6d001d7d52703744e2216775db61a5c9a2664610c91a8b9a481dc9"}, "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2": {"code": "class BenchmarkTrackParameterisation:\n    def track_x2(self, model, parameter_set, optimiser):\n        return self.x[1]\n\n    def setup(self, model, parameter_set, optimiser):\n        \"\"\"\n        Set up the parameterization problem for benchmarking.\n    \n        Args:\n            model (pybop.Model): The model class to be benchmarked.\n            parameter_set (str): The name of the parameter set to be used.\n            optimiser (pybop.Optimiser): The optimizer class to be used.\n        \"\"\"\n        # Set random seed\n        set_random_seed()\n    \n        # Create model instance\n        params = pybop.ParameterSet.pybamm(parameter_set)\n        params.update(\n            {\n                \"Negative electrode active material volume fraction\": 0.63,\n                \"Positive electrode active material volume fraction\": 0.51,\n            }\n        )\n        model_instance = model(parameter_set=params)\n    \n        # Define fitting parameters\n        parameters = [\n            pybop.Parameter(\n                \"Negative electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n            pybop.Parameter(\n                \"Positive electrode active material volume fraction\",\n                prior=pybop.Gaussian(0.55, 0.03),\n                bounds=[0.375, 0.7],\n            ),\n        ]\n    \n        # Generate synthetic data\n        sigma = 0.003\n        t_eval = np.arange(0, 900, 2)\n        values = model_instance.predict(t_eval=t_eval)\n        corrupt_values = values[\"Voltage [V]\"].data + np.random.normal(\n            0, sigma, len(t_eval)\n        )\n    \n        # Create dataset\n        dataset = pybop.Dataset(\n            {\n                \"Time [s]\": t_eval,\n                \"Current function [A]\": values[\"Current [A]\"].data,\n                \"Voltage [V]\": corrupt_values,\n            }\n        )\n    \n        # Create fitting problem\n        problem = pybop.FittingProblem(model_instance, parameters, dataset)\n    \n        # Create cost function\n        cost = pybop.SumSquaredError(problem=problem)\n    \n        # Create optimization instance\n        self.optim = pybop.Optimisation(cost, optimiser=optimiser)\n        if optimiser in [pybop.GradientDescent]:\n            self.optim.optimiser.set_learning_rate(\n                0.008\n            )  # Compromise between stability & performance\n    \n        # Track output results\n        self.x = self.results_tracking(model, parameter_set, optimiser)", "name": "benchmark_track_parameterisation.BenchmarkTrackParameterisation.track_x2", "param_names": ["model", "parameter_set", "optimiser"], "params": [["<class 'pybop.models.lithium_ion.echem.SPM'>", "<class 'pybop.models.lithium_ion.echem.SPMe'>"], ["'Chen2020'"], ["<class 'pybop.optimisers.scipy_optimisers.SciPyMinimize'>", "<class 'pybop.optimisers.scipy_optimisers.SciPyDifferentialEvolution'>", "<class 'pybop.optimisers.pints_optimisers.Adam'>", "<class 'pybop.optimisers.pints_optimisers.CMAES'>", "<class 'pybop.optimisers.pints_optimisers.GradientDescent'>", "<class 'pybop.optimisers.pints_optimisers.IRPropMin'>", "<class 'pybop.optimisers.pints_optimisers.PSO'>", "<class 'pybop.optimisers.pints_optimisers.SNES'>", "<class 'pybop.optimisers.pints_optimisers.XNES'>"]], "type": "track", "unit": "unit", "version": "67df2b2250c26683773d521fd684b08768cb9b0a70a5904b5e27562e604c7d4e"}}, "machines": {"SelfHostedRunner": {"machine": "SelfHostedRunner", "version": 1}}, "tags": {"v23.11": 325, "v23.12": 542, "v23.12rc0": 534, "v24.3": 1080}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}